version: 2.1

orbs:
  win: circleci/windows@2.2.0

aliases:
    - &restore_cache
        keys:
            - cget-{{ arch }}-{{ checksum "native_requirements.txt" }}
    - &install_dependencies
        name: Install C++ Dependencies
        command: ./init.sh
    - &save_cache
        key:
            cget-{{ arch }}-{{ checksum "native_requirements.txt" }}
        paths:
            - "cget"
    - &run-test-with-coverage
        name: "Run Tests"
        command: |
            rm -fr build
            rm -fr dist
            python setup.py install
            pip install coverage
            cd tests
            coverage run tests.py
            bash <(curl -s https://codecov.io/bash) -t 2a289a72-91f5-4a4c-b011-fc9288666a49
    - &update_ld_library_path
        name: "Update Library Search Path"
        command: echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/cget/lib:$(pwd)/cget/lib64' >> $BASH_ENV
    - &test-suite-linux-template
        steps:
            - checkout
              #- restore_cache: *restore_cache
            - run: 
                name: 'install system packages'
                command: |
                  sudo apt-get update
                  sudo apt-get -y install build-essential patchelf pip
                  pip install cget cython cmake
            - run: *install_dependencies
            - save_cache: *save_cache
            - run: *update_ld_library_path
            - run: *run-test-with-coverage
    - &mac-create-virtualenv
        name: "Create Virtual Environment"
        command: |
            virtualenv -p $PYTHON_BIN venv
            echo source $(pwd)/venv/bin/activate >> $BASH_ENV
            echo 'export PYTHON_PATH=$(pwd)/venv/bin' >> $BASH_ENV
    - &mac-install-requirements
        name: "Install Development Tools"
        command: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

jobs:
    lint-checks:
        docker:
            - image: cimg/python:3.9
        steps:
            - checkout
            - run:
                name: Setup Virtual Environment
                command: virtualenv venv
            - run:
                name: Install Flake8
                command: |
                    source venv/bin/activate
                    pip install flake8
                    pip install flake8-import-order
            - run:
                name: Flake8 Check
                command: |
                    source venv/bin/activate
                    flake8 garlicconfig

    test-linux-py35m:
        docker:
            - image: cimg/python:3.5
        <<: *test-suite-linux-template

    test-linux-py36m:
        docker:
            - image: cimg/python:3.6
        <<: *test-suite-linux-template

    test-linux-py37m:
        docker:
            - image: cimg/python:3.7
        <<: *test-suite-linux-template

    test-linux-py38:
        docker:
            - image: cimg/python:3.8
        <<: *test-suite-linux-template

    test-linux-py39:
        docker:
            - image: cimg/python:3.9
        <<: *test-suite-linux-template

    dist-linux:
        docker:
          - image: quay.io/pypa/manylinux2014_x86_64
        steps:
            - checkout
            - restore_cache: *restore_cache
            - run: 
                name: 'install system packages'
                command: |
                  yum -y install gcc patchelf python3 python3-pip
                  pip3 install wheel auditwheel
                  pip3 install cget cython
            - run: *install_dependencies
            - save_cache: *save_cache
            - run:
                name: 'Build Wheel Packages'
                command: ./.circleci/dist-linux.sh
            - run:
                name: 'Twine :: Upload to PyPI'
                command: |
                    pip3 install twine
                    twine upload wheelhouse/*

    test-mac-py36: &test-mac-template
        macos:
            xcode: "13.4.1"
        environment:
            PYTHON_BIN: python
        steps:
            - checkout
            - run: *mac-create-virtualenv
            - run: *mac-install-requirements
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run: *run-test-with-coverage

    test-mac-py37:
        <<: *test-mac-template
        environment:
            PYTHON_BIN: python3

    dist-mac-py36: &dist-mac-template
        macos:
            xcode: "13.4.1"
        environment:
            PYTHON_BIN: python
        steps:
            - checkout
            - run: *mac-create-virtualenv
            - run: *mac-install-requirements
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run:
                name: 'Build Wheel Package'
                command: $PYTHON_PATH/python setup.py bdist_wheel
            - run:
                name: 'Twine :: Upload to PyPI'
                command: |
                    $PYTHON_PATH/pip install twine
                    $PYTHON_PATH/twine upload dist/*

    dist-mac-py37:
        <<: *dist-mac-template
        environment:
            PYTHON_BIN: python3

    test-win32-py37-x64: &test-win32-x64
        executor: win/default
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.7.5
            ARCH: x64
        steps:
            - checkout
            - run: &install_win32_python
                name: "Install Python and Install Dependencies"
                command: .circleci\install_python.ps1
            - restore_cache:
                keys:
                - cget-v3-x64-{{ arch }}-{{ checksum "native_requirements.txt" }}
            - run: &install_win32_native_libs
                name: "Resolve Native Dependencies"
                command: .circleci\install_libs.ps1
            - save_cache:
                    key: cget-v3-x64-{{ arch }}-{{ checksum "native_requirements.txt" }}
                    paths: ["cget"]
            - run: &run_win32_tests
                name: "Run Tests for Windows"
                command: |
                    ~\garlic\Scripts\activate.ps1
                    python setup.py install
                    cd tests
                    python tests.py

    test-win32-py36-x64:
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.6.8
            ARCH: x64

    test-win32-py35-x64:
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.5.4
            ARCH: x64

    test-win32-py37-x86: &test-win32-x86
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: pythonx86
            PYTHON_VERSION: 3.7.5
        steps:
            - checkout
            - run: *install_win32_python
            - restore_cache:
                keys:
                - cget-v3-x86-{{ arch }}-{{ checksum "native_requirements.txt" }}
            - run: *install_win32_native_libs
            - save_cache:
                    key: cget-v3-x86-{{ arch }}-{{ checksum "native_requirements.txt" }}
                    paths: ["cget"]
            - run: *run_win32_tests

    test-win32-py36-x86:
        <<: *test-win32-x86
        environment:
            PYTHON_NAME: pythonx86
            PYTHON_VERSION: 3.6.8

    dist-win32-py37-x64: &dist-win32-x64
        <<: *test-win32-x64
        steps:
            - checkout
            - run: *install_win32_python
            - restore_cache:
                keys:
                - cget-v3-x64-{{ arch }}-{{ checksum "native_requirements.txt" }}
            - run: *install_win32_native_libs
            - save_cache:
                    key: cget-v3-x64-{{ arch }}-{{ checksum "native_requirements.txt" }}
                    paths: ["cget"]
            - run: &publish_win32
                name: "Build Package And Submit"
                command: |
                    ~\garlic\Scripts\activate.ps1
                    python setup.py bdist_wheel
                    pip install twine
                    twine upload dist/*

    dist-win32-py36-x64:
        <<: *dist-win32-x64
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.6.8
            ARCH: x64

    dist-win32-py37-x86: &dist-win32-x86
        <<: *test-win32-x86
        steps:
            - checkout
            - run: *install_win32_python
            - restore_cache:
                keys:
                - cget-v3-x86-{{ arch }}-{{ checksum "native_requirements.txt" }}
            - run: *install_win32_native_libs
            - save_cache:
                    key: cget-v3-x86-{{ arch }}-{{ checksum "native_requirements.txt" }}
                    paths: ["cget"]
            - run: &publish_win32
                name: "Build Package And Submit"
                command: |
                    ~\garlic\Scripts\activate.ps1
                    python setup.py bdist_wheel
                    pip install twine
                    twine upload dist/*

    dist-win32-py36-x86:
        <<: *dist-win32-x86
        environment:
            PYTHON_NAME: pythonx86
            PYTHON_VERSION: 3.6.8

    dist-win32-py35-x86:
        <<: *dist-win32-x86
        environment:
            PYTHON_NAME: pythonx86
            PYTHON_VERSION: 3.5.4

workflows:
    version: 2
    pr-checks:
        jobs:
            - test-win32-py36-x86
            - test-win32-py37-x86
            - test-win32-py36-x64
            - test-win32-py37-x64
            - lint-checks
            - test-linux-py35m
            - test-linux-py36m
            - test-linux-py37m
            - test-linux-py38
            - test-linux-py39
            - test-mac-py36
            - test-mac-py37
            - dist-linux:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
            - dist-mac-py37:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
            - dist-win32-py37-x64:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
            - dist-win32-py36-x64:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
            - dist-win32-py37-x86:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
            - dist-win32-py36-x86:
                filters:
                  tags:
                    only: /^[0-9]*[.][0-9]*[.][0-9]*$/
                  branches:
                    ignore: /.*/
