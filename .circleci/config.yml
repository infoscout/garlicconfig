version: 2.1

orbs:
  win: circleci/windows@2.2.0

aliases:
    - &restore_cache
        keys:
            - cget-{{ arch }}-{{ checksum "native_requirements.txt" }}
    - &install_dependencies
        name: Install C++ Dependencies
        command: ./init.sh
    - &save_cache
        key:
            cget-{{ arch }}-{{ checksum "native_requirements.txt" }}
        paths:
            - "cget"
    - &run-test-with-coverage
        name: "Run Tests"
        command: |
            rm -fr build
            rm -fr dist
            $PYTHON_PATH/python setup.py install
            $PYTHON_PATH/pip install coverage
            cd tests
            $PYTHON_PATH/coverage run tests.py
            bash <(curl -s https://codecov.io/bash) -t 2a289a72-91f5-4a4c-b011-fc9288666a49
    - &update_ld_library_path
        name: "Update Library Search Path"
        command: echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/cget/lib:$(pwd)/cget/lib64' >> $BASH_ENV
    - &test-suite-linux-template
        docker:
            - image: peymanmo/many_x64
        steps:
            - checkout
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run: *update_ld_library_path
            - run: *run-test-with-coverage
    - &mac-create-virtualenv
        name: "Create Virtual Environment"
        command: |
            virtualenv -p $PYTHON_BIN venv
            echo source $(pwd)/venv/bin/activate >> $BASH_ENV
            echo 'export PYTHON_PATH=$(pwd)/venv/bin' >> $BASH_ENV
    - &mac-install-requirements
        name: "Install Development Tools"
        command: pip install -r requirements.txt

jobs:
    lint-checks:
        docker:
            - image: circleci/python:2.7.13
        steps:
            - checkout
            - run:
                name: Setup Virtual Environment
                command: virtualenv venv
            - run:
                name: Install Flake8
                command: |
                    source venv/bin/activate
                    pip install flake8
                    pip install flake8-import-order
            - run:
                name: Flake8 Check
                command: |
                    source venv/bin/activate
                    flake8 garlicconfig

    test-linux-py27m:
        environment:
            PYTHON_PATH: /opt/python/cp27-cp27m/bin
        <<: *test-suite-linux-template

    test-linux-py27mu:
        environment:
            PYTHON_PATH: /opt/python/cp27-cp27mu/bin
        <<: *test-suite-linux-template

    test-linux-py34m:
        environment:
            PYTHON_PATH: /opt/python/cp34-cp34m/bin
        <<: *test-suite-linux-template

    test-linux-py35m:
        environment:
            PYTHON_PATH: /opt/python/cp35-cp35m/bin
        <<: *test-suite-linux-template

    test-linux-py36m:
        environment:
            PYTHON_PATH: /opt/python/cp36-cp36m/bin
        <<: *test-suite-linux-template

    test-linux-py37m:
        environment:
            PYTHON_PATH: /opt/python/cp37-cp37m/bin
        <<: *test-suite-linux-template

    dist-linux:
        docker:
            - image: peymanmo/many_x64
        steps:
            - checkout
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run:
                name: 'Build Wheel Packages'
                command: ./.circleci/dist-linux.sh
            - run:
                name: 'Twine :: Upload to PyPI'
                environment:
                    PYTHON_PATH: /opt/python/cp37-cp37m/bin
                command: |
                    $PYTHON_PATH/pip install twine
                    $PYTHON_PATH/twine upload wheelhouse/*

    test-mac-py27: &test-mac-template
        macos:
            xcode: "10.0.0"
        environment:
            PYTHON_BIN: python
        steps:
            - checkout
            - run: *mac-create-virtualenv
            - run: *mac-install-requirements
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run: *run-test-with-coverage

    test-mac-py37:
        <<: *test-mac-template
        environment:
            PYTHON_BIN: python3

    dist-mac-py27: &dist-mac-template
        macos:
            xcode: "10.0.0"
        environment:
            PYTHON_BIN: python
        steps:
            - checkout
            - run: *mac-create-virtualenv
            - run: *mac-install-requirements
            - restore_cache: *restore_cache
            - run: *install_dependencies
            - save_cache: *save_cache
            - run:
                name: 'Build Wheel Package'
                command: $PYTHON_PATH/python setup.py bdist_wheel
            - run:
                name: 'Twine :: Upload to PyPI'
                command: |
                    $PYTHON_PATH/pip install twine
                    $PYTHON_PATH/twine upload dist/*

    dist-mac-py37:
        <<: *dist-mac-template
        environment:
            PYTHON_BIN: python3

    test-win32-py37-x64: &test-win32-x64
        executor: win/default
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.7.5
            ARCH: x64
        steps:
            - checkout
            - run: &install_win32_python
                name: "Install Python and Install Dependencies"
                command: |
                    cd ~
                    nuget install $env:PYTHON_NAME -Version $env:PYTHON_VERSION -ExcludeVersion -OutputDirectory .
                    .\$env:PYTHON_NAME\tools\python.exe -m pip install virtualenv
                    .\$env:PYTHON_NAME\tools\python.exe -m virtualenv garlic
                    .\garlic\Scripts\activate.ps1
                    cd project
                    pip install -r requirements.txt
            - restore_cache:
                keys:
                - cget-v2-x64-{{ arch }}-{{ checksum "requirements.txt" }}
            - run: &install_win32_native_libs
                name: "Resolve Native Dependencies x64"
                command: |
                    ~\garlic\Scripts\activate.ps1
                    cget init --std=c++ --static
                    cget install -DCMAKE_GENERATOR_PLATFORM=$env:ARCH --file=native_requirements.txt
            - save_cache:
                    key: cget-v2-x64-{{ arch }}-{{ checksum "requirements.txt" }}
                    paths: ["cget"]
            - run: &run_win32_tests
                name: "Run Tests for Windows"
                command: |
                    ~\garlic\Scripts\activate.ps1
                    python setup.py install
                    cd tests
                    python tests.py

    test-win32-py36-x64:
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.6.8
            ARCH: x64

    test-win32-py35-x64:
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: python
            PYTHON_VERSION: 3.5.4
            ARCH: x64

    test-win32-py27-x64:
        <<: *test-win32-x64
        environment:
            PYTHON_NAME: python2
            PYTHON_VERSION: 2.7.17
            ARCH: x64

workflows:
    version: 2
    pr-checks:
        jobs:
            - test-win32-py27-x64
            - test-win32-py35-x64
            - test-win32-py36-x64
            - test-win32-py37-x64
            #- lint-checks
            #- test-linux-py27m
            #- test-linux-py27mu
            #- test-linux-py34m
            #- test-linux-py35m
            #- test-linux-py36m
            #- test-linux-py37m
            #- test-mac-py27
            #- test-mac-py37
            - dist-linux:
                filters:
                  tags:
                    only: /[0-9][.][0-9][.][0-9]/
                  branches:
                    ignore: /.*/
            - dist-mac-py27:
                filters:
                  tags:
                    only: /[0-9][.][0-9][.][0-9]/
                  branches:
                    ignore: /.*/
            - dist-mac-py37:
                filters:
                  tags:
                    only: /^[0-9][.][0-9][.][0-9]$/
                  branches:
                    ignore: /.*/
